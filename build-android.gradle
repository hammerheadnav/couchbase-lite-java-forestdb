import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.library'
apply plugin: "maven"

version = System.getenv("MAVEN_UPLOAD_VERSION")

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.0'
    }
}

repositories {
    maven { url 'http://files.couchbase.com/maven2/' }
    jcenter()
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    // workaround for "duplicate files during packaging of APK" issue
    // see https://groups.google.com/d/msg/adt-dev/bl5Rc4Szpzg/wC8cylTWuIEJ
    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    sourceSets {
        main {
            java.srcDirs = ['vendor/cbforest/Java/src', 'src/main/java']
            jni.srcDirs = [] // This prevents the auto generation of Android.mk
            jniLibs.srcDir file('libs') // This is not necessary unless you have precompiled libraries in your project.
        }
    }

    task generateForestDBStoreJniHeaders(type: Exec, description: 'Generate ForestDBStore JNI header files') {
        def classpath      = "src/main/java"
        def nativeIncludes = "jni/source"
        commandLine "javah", "-d", "$nativeIncludes", "-classpath", "$classpath",
                "com.couchbase.lite.v1.store.ForestDBStore"
    }

    task generateCBForestJniHeaders(type: Exec, description: 'Generate CBForest JNI C header files') {
        def classpath      = "vendor/cbforest/Java/src"
        def nativeIncludes = "vendor/cbforest/Java/jni"
        commandLine "javah", "-d", "$nativeIncludes", "-classpath", "$classpath",
                "com.couchbase.cbforest.Database",
                "com.couchbase.cbforest.Document",
                "com.couchbase.cbforest.DocumentIterator",
                "com.couchbase.cbforest.ForestException",
                "com.couchbase.cbforest.FullTextResult",
                "com.couchbase.cbforest.Indexer",
                "com.couchbase.cbforest.Logger",
                "com.couchbase.cbforest.QueryIterator",
                "com.couchbase.cbforest.View"
    }
    generateCBForestJniHeaders.dependsOn 'generateForestDBStoreJniHeaders'

    task cleanJniHeaders(type: Delete, description: 'Clean JNI C header files') {
        delete "vendor/cbforest/Java/jni/com_couchbase_cbforest_Database.h"
        delete "vendor/cbforest/Java/jni/com_couchbase_cbforest_Document.h"
        delete "vendor/cbforest/Java/jni/com_couchbase_cbforest_DocumentIterator.h"
        delete "vendor/cbforest/Java/jni/com_couchbase_cbforest_ForestException.h"
        delete "vendor/cbforest/Java/jni/com_couchbase_cbforest_FullTextResult.h"
        delete "vendor/cbforest/Java/jni/com_couchbase_cbforest_Indexer.h"
        delete "vendor/cbforest/Java/jni/com_couchbase_cbforest_Logger.h"
        delete "vendor/cbforest/Java/jni/com_couchbase_cbforest_QueryIterator.h"
        delete "vendor/cbforest/Java/jni/com_couchbase_cbforest_View.h"
    }

    // call regular ndk-build(.cmd) script from app directory
    task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
        commandLine "true"
//        def ndkDir = android.ndkDirectory
//        def ndkBuild = "$ndkDir/ndk-build"
//        if(Os.isFamily(Os.FAMILY_WINDOWS))
//            ndkBuild = "$ndkDir\\ndk-build.cmd"
//        commandLine "$ndkBuild", '-C', file('jni').absolutePath
    }

    buildNative.dependsOn 'generateCBForestJniHeaders'
    buildNative.doLast {
        // Commented out JNI header clean method.
        // Instead, added these generated headers in cbforest/.gitignore
        // cleanJniHeaders.execute()
    }

    task cleanNative(type: Exec, description: 'Clean JNI object files') {
        def ndkDir = android.ndkDirectory
        def ndkBuild = "$ndkDir/ndk-build"
        if(Os.isFamily(Os.FAMILY_WINDOWS))
            ndkBuild = "$ndkDir\\ndk-build.cmd"
        commandLine "$ndkBuild", '-C', file('jni').absolutePath, 'clean'
    }
    cleanNative.dependsOn 'cleanJniHeaders'
    clean.dependsOn 'cleanNative'

    // Define a task for ndk-build
    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn buildNative
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile project(":libraries:couchbase-lite-java-core")

    androidTestCompile 'com.fasterxml.jackson.core:jackson-databind:2.5.0'
    androidTestCompile 'com.fasterxml.jackson.core:jackson-core:2.5.0'
    androidTestCompile 'com.fasterxml.jackson.core:jackson-annotations:2.5.0'
}

////////////////////////////////////////////
// For Maven
////////////////////////////////////////////

task createMavenDirectory(type: Exec) {
    ext {
        uploadUser = System.getenv("MAVEN_UPLOAD_USERNAME") + ":" + System.getenv("MAVEN_UPLOAD_PASSWORD")
        mkcolPath  = System.getenv("MAVEN_UPLOAD_REPO_URL") + "com/couchbase/lite/couchbase-lite-android-forestdb/" + version + "/"
    }
    commandLine "curl", "--user", uploadUser, "-X", "MKCOL", mkcolPath
}

// this hack is only needed for apache mod_dav based Maven repo's like file.couchbase.com.  otherwise, skip it
createMavenDirectory.onlyIf { System.getenv("MAVEN_UPLOAD_REPO_URL").contains("files") }

// first create the directory, then do the upload
//task uploadArchivesWrapper(dependsOn: createMavenDirectory) << {
//    uploadArchives.execute()
//}
//
//// this will upload, but will not first create a directory (which is needed on some servers)
//uploadArchives {
//    repositories {
//        mavenDeployer {
//            repository(url: System.getenv("MAVEN_UPLOAD_REPO_URL")) {
//                authentication(userName: System.getenv("MAVEN_UPLOAD_USERNAME"), password: System.getenv("MAVEN_UPLOAD_PASSWORD"))
//            }
//            pom.version = version
//            pom.groupId = 'com.couchbase.lite.v1'
//            pom.artifactId = 'couchbase-lite-android-forestdb'
//            pom.project {
//                licenses {
//                    license {
//                        name 'Couchbase Community Edition License Agreement'
//                        url 'http://www.couchbase.com/agreement/community'
//                        distribution 'repo'
//                    }
//                }
//            }
//        }
//    }
//}

